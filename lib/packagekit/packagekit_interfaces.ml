(* File auto-generated by obus-gen-interface, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_PackageKit =
struct
  let interface = "org.freedesktop.PackageKit"
  let m_CanAuthorize = {
    Method.interface = interface;
    Method.member = "CanAuthorize";
    Method.i_args = (arg1
                       (Some "action_id", basic_string));
    Method.o_args = (arg1
                       (Some "result", basic_uint32));
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_CreateTransaction = {
    Method.interface = interface;
    Method.member = "CreateTransaction";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "object_path", basic_object_path));
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_GetDaemonState = {
    Method.interface = interface;
    Method.member = "GetDaemonState";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "state", basic_string));
    Method.annotations = [];
  }
  let m_GetPackageHistory = {
    Method.interface = interface;
    Method.member = "GetPackageHistory";
    Method.i_args = (arg2
                       (Some "names", array basic_string)
                       (Some "count", basic_uint32));
    Method.o_args = (arg1
                       (Some "history", dict string (array (dict string variant))));
    Method.annotations = [("org.qtproject.QtDBus.QtTypeName.Out0", "QVariant")];
  }
  let m_GetTimeSinceAction = {
    Method.interface = interface;
    Method.member = "GetTimeSinceAction";
    Method.i_args = (arg1
                       (Some "role", basic_uint32));
    Method.o_args = (arg1
                       (Some "seconds", basic_uint32));
    Method.annotations = [];
  }
  let m_GetTransactionList = {
    Method.interface = interface;
    Method.member = "GetTransactionList";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "transactions", array basic_object_path));
    Method.annotations = [];
  }
  let m_SetProxy = {
    Method.interface = interface;
    Method.member = "SetProxy";
    Method.i_args = (arg6
                       (Some "proxy_http", basic_string)
                       (Some "proxy_https", basic_string)
                       (Some "proxy_ftp", basic_string)
                       (Some "proxy_socks", basic_string)
                       (Some "no_proxy", basic_string)
                       (Some "pac", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [("org.freedesktop.DBus.GLib.Async", "")];
  }
  let m_StateHasChanged = {
    Method.interface = interface;
    Method.member = "StateHasChanged";
    Method.i_args = (arg1
                       (Some "reason", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_SuggestDaemonQuit = {
    Method.interface = interface;
    Method.member = "SuggestDaemonQuit";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let s_RepoListChanged = {
    Signal.interface = interface;
    Signal.member = "RepoListChanged";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let s_RestartSchedule = {
    Signal.interface = interface;
    Signal.member = "RestartSchedule";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let s_TransactionListChanged = {
    Signal.interface = interface;
    Signal.member = "TransactionListChanged";
    Signal.args = (arg1
                       (Some "transactions", array basic_string));
    Signal.annotations = [];
  }
  let s_UpdatesChanged = {
    Signal.interface = interface;
    Signal.member = "UpdatesChanged";
    Signal.args = (arg0);
    Signal.annotations = [];
  }
  let p_BackendAuthor = {
    Property.interface = interface;
    Property.member = "BackendAuthor";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_BackendDescription = {
    Property.interface = interface;
    Property.member = "BackendDescription";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_BackendName = {
    Property.interface = interface;
    Property.member = "BackendName";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_DistroId = {
    Property.interface = interface;
    Property.member = "DistroId";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Filters = {
    Property.interface = interface;
    Property.member = "Filters";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Groups = {
    Property.interface = interface;
    Property.member = "Groups";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Locked = {
    Property.interface = interface;
    Property.member = "Locked";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_MimeTypes = {
    Property.interface = interface;
    Property.member = "MimeTypes";
    Property.typ = array basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_NetworkState = {
    Property.interface = interface;
    Property.member = "NetworkState";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_Roles = {
    Property.interface = interface;
    Property.member = "Roles";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_VersionMajor = {
    Property.interface = interface;
    Property.member = "VersionMajor";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_VersionMicro = {
    Property.interface = interface;
    Property.member = "VersionMicro";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_VersionMinor = {
    Property.interface = interface;
    Property.member = "VersionMinor";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_CanAuthorize : 'a OBus_object.t -> string -> int32 Lwt.t;
    m_CreateTransaction : 'a OBus_object.t -> unit -> OBus_path.t Lwt.t;
    m_GetDaemonState : 'a OBus_object.t -> unit -> string Lwt.t;
    m_GetPackageHistory : 'a OBus_object.t -> string list * int32 -> (string * (string * OBus_value.V.single) list list) list Lwt.t;
    m_GetTimeSinceAction : 'a OBus_object.t -> int32 -> int32 Lwt.t;
    m_GetTransactionList : 'a OBus_object.t -> unit -> OBus_path.t list Lwt.t;
    m_SetProxy : 'a OBus_object.t -> string * string * string * string * string * string -> unit Lwt.t;
    m_StateHasChanged : 'a OBus_object.t -> string -> unit Lwt.t;
    m_SuggestDaemonQuit : 'a OBus_object.t -> unit -> unit Lwt.t;
    p_BackendAuthor : 'a OBus_object.t -> string React.signal;
    p_BackendDescription : 'a OBus_object.t -> string React.signal;
    p_BackendName : 'a OBus_object.t -> string React.signal;
    p_DistroId : 'a OBus_object.t -> string React.signal;
    p_Filters : 'a OBus_object.t -> int64 React.signal;
    p_Groups : 'a OBus_object.t -> int64 React.signal;
    p_Locked : 'a OBus_object.t -> bool React.signal;
    p_MimeTypes : 'a OBus_object.t -> string list React.signal;
    p_NetworkState : 'a OBus_object.t -> int32 React.signal;
    p_Roles : 'a OBus_object.t -> int64 React.signal;
    p_VersionMajor : 'a OBus_object.t -> int32 React.signal;
    p_VersionMicro : 'a OBus_object.t -> int32 React.signal;
    p_VersionMinor : 'a OBus_object.t -> int32 React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_CanAuthorize members.m_CanAuthorize;
        method_info m_CreateTransaction members.m_CreateTransaction;
        method_info m_GetDaemonState members.m_GetDaemonState;
        method_info m_GetPackageHistory members.m_GetPackageHistory;
        method_info m_GetTimeSinceAction members.m_GetTimeSinceAction;
        method_info m_GetTransactionList members.m_GetTransactionList;
        method_info m_SetProxy members.m_SetProxy;
        method_info m_StateHasChanged members.m_StateHasChanged;
        method_info m_SuggestDaemonQuit members.m_SuggestDaemonQuit;
      |]
      [|
        signal_info s_RepoListChanged;
        signal_info s_RestartSchedule;
        signal_info s_TransactionListChanged;
        signal_info s_UpdatesChanged;
      |]
      [|
        property_r_info p_BackendAuthor members.p_BackendAuthor;
        property_r_info p_BackendDescription members.p_BackendDescription;
        property_r_info p_BackendName members.p_BackendName;
        property_r_info p_DistroId members.p_DistroId;
        property_r_info p_Filters members.p_Filters;
        property_r_info p_Groups members.p_Groups;
        property_r_info p_Locked members.p_Locked;
        property_r_info p_MimeTypes members.p_MimeTypes;
        property_r_info p_NetworkState members.p_NetworkState;
        property_r_info p_Roles members.p_Roles;
        property_r_info p_VersionMajor members.p_VersionMajor;
        property_r_info p_VersionMicro members.p_VersionMicro;
        property_r_info p_VersionMinor members.p_VersionMinor;
      |]
end
module Org_freedesktop_PackageKit_Offline =
struct
  let interface = "org.freedesktop.PackageKit.Offline"
  let m_Cancel = {
    Method.interface = interface;
    Method.member = "Cancel";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_ClearResults = {
    Method.interface = interface;
    Method.member = "ClearResults";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_GetPrepared = {
    Method.interface = interface;
    Method.member = "GetPrepared";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "package_ids", array basic_string));
    Method.annotations = [];
  }
  let m_Trigger = {
    Method.interface = interface;
    Method.member = "Trigger";
    Method.i_args = (arg1
                       (Some "action", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let m_TriggerUpgrade = {
    Method.interface = interface;
    Method.member = "TriggerUpgrade";
    Method.i_args = (arg1
                       (Some "action", basic_string));
    Method.o_args = (arg0);
    Method.annotations = [];
  }
  let p_PreparedUpgrade = {
    Property.interface = interface;
    Property.member = "PreparedUpgrade";
    Property.typ = dict string variant;
    Property.access = Property.readable;
    Property.annotations = [("org.qtproject.QtDBus.QtTypeName", "QVariantMap")];
  }
  let p_TriggerAction = {
    Property.interface = interface;
    Property.member = "TriggerAction";
    Property.typ = basic_string;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_UpdatePrepared = {
    Property.interface = interface;
    Property.member = "UpdatePrepared";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_UpdateTriggered = {
    Property.interface = interface;
    Property.member = "UpdateTriggered";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_UpgradePrepared = {
    Property.interface = interface;
    Property.member = "UpgradePrepared";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  let p_UpgradeTriggered = {
    Property.interface = interface;
    Property.member = "UpgradeTriggered";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
    Property.annotations = [];
  }
  type 'a members = {
    m_Cancel : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_ClearResults : 'a OBus_object.t -> unit -> unit Lwt.t;
    m_GetPrepared : 'a OBus_object.t -> unit -> string list Lwt.t;
    m_Trigger : 'a OBus_object.t -> string -> unit Lwt.t;
    m_TriggerUpgrade : 'a OBus_object.t -> string -> unit Lwt.t;
    p_PreparedUpgrade : 'a OBus_object.t -> (string * OBus_value.V.single) list React.signal;
    p_TriggerAction : 'a OBus_object.t -> string React.signal;
    p_UpdatePrepared : 'a OBus_object.t -> bool React.signal;
    p_UpdateTriggered : 'a OBus_object.t -> bool React.signal;
    p_UpgradePrepared : 'a OBus_object.t -> bool React.signal;
    p_UpgradeTriggered : 'a OBus_object.t -> bool React.signal;
  }
  let make members =
    OBus_object.make_interface_unsafe interface
      [
      ]
      [|
        method_info m_Cancel members.m_Cancel;
        method_info m_ClearResults members.m_ClearResults;
        method_info m_GetPrepared members.m_GetPrepared;
        method_info m_Trigger members.m_Trigger;
        method_info m_TriggerUpgrade members.m_TriggerUpgrade;
      |]
      [|
      |]
      [|
        property_r_info p_PreparedUpgrade members.p_PreparedUpgrade;
        property_r_info p_TriggerAction members.p_TriggerAction;
        property_r_info p_UpdatePrepared members.p_UpdatePrepared;
        property_r_info p_UpdateTriggered members.p_UpdateTriggered;
        property_r_info p_UpgradePrepared members.p_UpgradePrepared;
        property_r_info p_UpgradeTriggered members.p_UpgradeTriggered;
      |]
end
