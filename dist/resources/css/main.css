/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
.mdc-drawer--custom {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  color: rgba(0, 0, 0, 0.87);
  height: 100%;
  width: 0;
  position: fixed; }
  .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-shrink: 0;
    align-items: center;
    box-sizing: border-box;
    height: 56px;
    padding: 16px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    /* TODO(sgomes): replace with global breakpoints when we have them */ }
    @media (min-width: 600px) {
      .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
        height: 64px; } }
  .mdc-drawer--custom .mdc-drawer__header {
    position: relative; }
  .mdc-drawer--custom .mdc-drawer__header::before {
    display: block;
    padding-top: 56.25%;
    content: ""; }
  .mdc-drawer--custom .mdc-drawer__header-content {
    display: flex;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    align-items: flex-end;
    box-sizing: border-box;
    padding: 16px; }
  .mdc-drawer--custom .mdc-list-item {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.5rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    position: relative;
    outline: none;
    color: inherit;
    text-decoration: none; }
  .mdc-drawer--custom .mdc-list-item__graphic {
    color: rgba(0, 0, 0, 0.54); }
  .mdc-drawer--custom.mdc-drawer--permanent,
  .mdc-drawer--custom .mdc-drawer__drawer {
    background-color: #fff; }
  .mdc-drawer--custom .icon-dropdown {
    position: absolute;
    right: 4px;
    margin-right: 10px;
    margin-top: 12px; }
  .mdc-drawer--custom .mdc-account-icon {
    width: 54px;
    heigh: 54px; }
  .mdc-drawer--custom .mdc-drawer__header {
    height: 128px; }
  .mdc-drawer--custom .mdc-drawer__header-content {
    padding: 0;
    width: 100%; }
  .mdc-drawer--custom .mdc-drawer__panel {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    height: 48px;
    line-height: 48px;
    margin-left: 16px;
    margin-right: 16px;
    overflow: hidden;
    width: 100%;
    cursor: pointer; }
    .mdc-drawer--custom .mdc-drawer__panel--open .dropdown {
      transform: rotate(180deg); }
  .mdc-drawer--custom .mdc-drawer__drawer {
    border-left: 0;
    border-right: 0px solid #e4e4e4;
    left: 0;
    right: initial;
    will-change: transform;
    transform: translateX(-107%);
    transform: translateX(calc(-100% - 20px));
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
    transition: left 0.225s;
    display: inline-flex;
    flex-direction: column;
    box-sizing: border-box;
    width: 240px;
    overflow: hidden;
    touch-action: none;
    height: 100%; }
    [dir="rtl"] .mdc-drawer--custom .mdc-drawer__drawer, .mdc-drawer--custom .mdc-drawer__drawer[dir="rtl"] {
      border-left: 0px solid #e4e4e4;
      border-right: 0; }
    [dir="rtl"] .mdc-drawer--custom .mdc-drawer__drawer, .mdc-drawer--custom .mdc-drawer__drawer[dir="rtl"] {
      left: initial;
      right: 0; }
    .mdc-drawer--custom .mdc-drawer__drawer .mdc-drawer__wrapper {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      height: 48px;
      transition: all 0.225s;
      overflow: hidden; }
      .mdc-drawer--custom .mdc-drawer__drawer .mdc-drawer__wrapper--hidden {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        height: 0px;
        transition: all 0.225s;
        overflow: hidden; }
      .mdc-drawer--custom .mdc-drawer__drawer .mdc-drawer__wrapper .mdc-icon {
        width: 72px; }
  .mdc-drawer--custom.mdc-drawer--animating .mdc-drawer__drawer {
    transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
  .mdc-drawer--custom.mdc-drawer--animating.mdc-drawer--open
  .mdc-drawer__drawer {
    transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1); }
  .mdc-drawer--custom.mdc-drawer--open {
    width: 240px;
    pointer-events: auto; }
    .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer {
      transform: none; }
    [dir="rtl"] .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer, .mdc-drawer--custom.mdc-drawer--open[dir="rtl"] .mdc-drawer__drawer {
      transform: none; }

@media only screen and (max-width: 1200px) {
  .mdc-drawer--custom {
    /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
    color: rgba(0, 0, 0, 0.87);
    position: fixed;
    top: 0;
    left: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
    contain: strict;
    z-index: 9999;
    /* Shaded background */ }
    .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
      display: flex;
      position: relative;
      flex-direction: row;
      flex-shrink: 0;
      align-items: center;
      box-sizing: border-box;
      height: 56px;
      padding: 16px;
      border-bottom: 1px solid rgba(0, 0, 0, 0.12);
      /* TODO(sgomes): replace with global breakpoints when we have them */ } }
    @media only screen and (max-width: 1200px) and (min-width: 600px) {
      .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
        height: 64px; } }
@media only screen and (max-width: 1200px) {
    .mdc-drawer--custom .mdc-drawer__header {
      position: relative; }
    .mdc-drawer--custom .mdc-drawer__header::before {
      display: block;
      padding-top: 56.25%;
      content: ""; }
    .mdc-drawer--custom .mdc-drawer__header-content {
      display: flex;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      align-items: flex-end;
      box-sizing: border-box;
      padding: 16px; }
    .mdc-drawer--custom .mdc-list-item {
      font-family: Roboto, sans-serif;
      -moz-osx-font-smoothing: grayscale;
      -webkit-font-smoothing: antialiased;
      font-size: 0.875rem;
      line-height: 1.5rem;
      font-weight: 500;
      letter-spacing: 0.04em;
      text-decoration: inherit;
      text-transform: inherit;
      position: relative;
      outline: none;
      color: inherit;
      text-decoration: none; }
    .mdc-drawer--custom .mdc-list-item__graphic {
      color: rgba(0, 0, 0, 0.54); }
    .mdc-drawer--custom.mdc-drawer--permanent,
    .mdc-drawer--custom .mdc-drawer__drawer {
      background-color: #fff; }
    .mdc-drawer--custom::before {
      background-color: rgba(0, 0, 0, 0.6); }
    .mdc-drawer--custom::before {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      opacity: 0;
      opacity: var(--mdc-temporary-drawer-opacity, 0);
      content: "";
      will-change: opacity; }
    .mdc-drawer--custom .mdc-drawer__header-content {
      padding: 0; }
    .mdc-drawer--custom .mdc-drawer__drawer {
      box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
      left: 0;
      right: initial;
      will-change: transform;
      transform: translateX(-107%);
      transform: translateX(calc(-100% - 20px));
      display: flex;
      position: absolute;
      flex-direction: column;
      box-sizing: border-box;
      width: 100%;
      max-width: 240px;
      overflow: hidden;
      touch-action: none; }
      [dir="rtl"] .mdc-drawer--custom .mdc-drawer__drawer, .mdc-drawer--custom .mdc-drawer__drawer[dir="rtl"] {
        left: initial;
        right: 0; }
    .mdc-drawer--custom .mdc-drawer__content {
      flex-grow: 1;
      box-sizing: border-box;
      margin: 0;
      overflow-x: hidden;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
      touch-action: pan-y; }
    .mdc-drawer--custom .mdc-drawer__footer {
      box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
      flex-shrink: 0; }
    .mdc-drawer--custom.mdc-drawer--animating::before {
      transition: opacity 0.3s 0ms cubic-bezier(0, 0, 0.2, 1); }
    .mdc-drawer--custom.mdc-drawer--animating.mdc-drawer--open .mdc-drawer__drawer {
      transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1); }
    .mdc-drawer--custom.mdc-drawer--animating .mdc-drawer__drawer {
      transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
    .mdc-drawer--custom.mdc-drawer--open {
      pointer-events: auto;
      width: 100%; }
      .mdc-drawer--custom.mdc-drawer--open::before {
        opacity: 1;
        opacity: var(--mdc-temporary-drawer-opacity, 1); }
      .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer {
        transform: none; }
      [dir="rtl"] .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer, .mdc-drawer--custom.mdc-drawer--open[dir="rtl"] .mdc-drawer__drawer {
        transform: none; }

  .mdc-drawer-scroll-lock {
    overflow: hidden; } }
.ats-error-block {
  justify-content: center;
  align-items: center; }
  .ats-error-block .mdc-icon {
    width: 40px;
    height: 40px;
    font-size: 40px;
    color: #e57373; }
  .ats-error-block .mdc-typography {
    margin-top: 10px;
    text-align: center;
    /* @alternate */
    color: rgba(0, 0, 0, 0.54);
    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }

.ats-progress-block {
  flex-direction: column;
  justify-content: center;
  align-items: center; }
  .ats-progress-block > p {
    margin-top: 10px;
    text-align: center;
    /* @alternate */
    color: rgba(0, 0, 0, 0.54);
    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }
@keyframes blink {
  0% {
    opacity: .2; }
  20% {
    opacity: 1; }
  100% {
    opacity: .2; } }
    .ats-progress-block > p span {
      animation-name: blink;
      animation-duration: 1.4s;
      animation-iteration-count: infinite;
      animation-fill-mode: both; }
    .ats-progress-block > p span:nth-child(2) {
      animation-delay: .2s; }
    .ats-progress-block > p span:nth-child(3) {
      animation-delay: .4s; }

:root {
  --mdc-box-margin: 0px; }

html {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

body {
  margin: 0;
  background-color: #e0e0e0; }

.material-icons {
  user-select: none; }

#main-drawer {
  z-index: 21; }

#main-toolbar {
  z-index: 20; }
  #main-toolbar .mdc-tab-bar__indicator,
  #main-toolbar .mdc-tab__indicator {
    /* @alternate */
    background-color: white;
    background-color: var(--mdc-theme-text-primary-on-primary, white); }
  #main-toolbar .mdc-tab {
    /* @alternate */
    color: white;
    color: var(--mdc-theme-text-primary-on-primary, white); }
    #main-toolbar .mdc-tab .mdc-tab__icon {
      /* @alternate */
      color: white;
      color: var(--mdc-theme-text-primary-on-primary, white); }
  #main-toolbar .mdc-tab-bar-scroller__indicator {
    /* @alternate */
    color: white;
    color: var(--mdc-theme-text-primary-on-primary, white); }
  #main-toolbar .mdc-toolbar__title {
    font-weight: 300;
    font-size: 24px; }

#main-content {
  margin-top: 64px;
  position: absolute;
  width: 100%;
  min-height: calc(100vh - 64px); }
  #main-content.main-content--dynamic {
    margin-top: 128px;
    min-height: calc(100vh - 128px); }

#main-toolbar, #main-content {
  left: 0px;
  transition: width 0.225s, left 0.225s; }

@media (min-width: 1200px) {
  body.hide-sidedrawer #main-toolbar, body.hide-sidedrawer #main-content {
    left: 240px;
    width: calc(100% - 240px); } }
#arbitrary-content {
  padding: 20px; }
  #arbitrary-content > .mdc-layout-grid {
    --mdc-layout-grid-margin-desktop: 0px;
    --mdc-layout-grid-margin-tablet: 0px;
    --mdc-layout-grid-margin-phone: 0px; }

/*# sourceMappingURL=main.css.map */
