/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
.mdc-drawer--custom {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  color: rgba(0, 0, 0, 0.87);
  height: 100%;
  width: 0;
  position: fixed; }
  .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-shrink: 0;
    align-items: center;
    box-sizing: border-box;
    height: 56px;
    padding: 16px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    /* TODO(sgomes): replace with global breakpoints when we have them */ }
    @media (min-width: 600px) {
      .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
        height: 64px; } }
  .mdc-drawer--custom .mdc-drawer__header {
    position: relative; }
  .mdc-drawer--custom .mdc-drawer__header::before {
    display: block;
    padding-top: 56.25%;
    content: ""; }
  .mdc-drawer--custom .mdc-drawer__header-content {
    display: flex;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    align-items: flex-end;
    box-sizing: border-box;
    padding: 16px; }
  .mdc-drawer--custom .mdc-list-item {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.5rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    position: relative;
    outline: none;
    color: inherit;
    text-decoration: none; }
  .mdc-drawer--custom .mdc-list-item__graphic {
    color: rgba(0, 0, 0, 0.54); }
  .mdc-drawer--custom.mdc-drawer--permanent,
  .mdc-drawer--custom .mdc-drawer__drawer {
    background-color: #fff; }
  .mdc-drawer--custom .icon-dropdown {
    position: absolute;
    right: 4px;
    margin-right: 10px;
    margin-top: 12px; }
  .mdc-drawer--custom .mdc-account-icon {
    width: 54px;
    heigh: 54px; }
  .mdc-drawer--custom .mdc-drawer__header {
    height: 128px; }
  .mdc-drawer--custom .mdc-drawer__header-content {
    padding: 0;
    width: 100%; }
  .mdc-drawer--custom .mdc-drawer__panel {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    height: 48px;
    line-height: 48px;
    margin-left: 16px;
    margin-right: 16px;
    overflow: hidden;
    width: 100%;
    cursor: pointer; }
    .mdc-drawer--custom .mdc-drawer__panel--open .dropdown {
      transform: rotate(180deg); }
  .mdc-drawer--custom .mdc-drawer__drawer {
    border-left: 0;
    border-right: 0px solid #e4e4e4;
    left: 0;
    right: initial;
    will-change: transform;
    transform: translateX(-107%);
    transform: translateX(calc(-100% - 20px));
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
    transition: left 0.225s;
    display: inline-flex;
    flex-direction: column;
    box-sizing: border-box;
    width: 240px;
    overflow: hidden;
    touch-action: none;
    height: 100%; }
    [dir="rtl"] .mdc-drawer--custom .mdc-drawer__drawer, .mdc-drawer--custom .mdc-drawer__drawer[dir="rtl"] {
      border-left: 0px solid #e4e4e4;
      border-right: 0; }
    [dir="rtl"] .mdc-drawer--custom .mdc-drawer__drawer, .mdc-drawer--custom .mdc-drawer__drawer[dir="rtl"] {
      left: initial;
      right: 0; }
    .mdc-drawer--custom .mdc-drawer__drawer .mdc-drawer__wrapper {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      height: 48px;
      transition: all 0.225s;
      overflow: hidden; }
      .mdc-drawer--custom .mdc-drawer__drawer .mdc-drawer__wrapper--hidden {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        height: 0px;
        transition: all 0.225s;
        overflow: hidden; }
      .mdc-drawer--custom .mdc-drawer__drawer .mdc-drawer__wrapper .mdc-icon {
        width: 72px; }
  .mdc-drawer--custom.mdc-drawer--animating .mdc-drawer__drawer {
    transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
  .mdc-drawer--custom.mdc-drawer--animating.mdc-drawer--open
  .mdc-drawer__drawer {
    transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1); }
  .mdc-drawer--custom.mdc-drawer--open {
    width: 240px;
    pointer-events: auto; }
    .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer {
      transform: none; }
    [dir="rtl"] .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer, .mdc-drawer--custom.mdc-drawer--open[dir="rtl"] .mdc-drawer__drawer {
      transform: none; }

@media only screen and (max-width: 1200px) {
  .mdc-drawer--custom {
    /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
    color: rgba(0, 0, 0, 0.87);
    position: fixed;
    top: 0;
    left: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
    contain: strict;
    z-index: 9999;
    /* Shaded background */ }
    .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
      display: flex;
      position: relative;
      flex-direction: row;
      flex-shrink: 0;
      align-items: center;
      box-sizing: border-box;
      height: 56px;
      padding: 16px;
      border-bottom: 1px solid rgba(0, 0, 0, 0.12);
      /* TODO(sgomes): replace with global breakpoints when we have them */ } }
    @media only screen and (max-width: 1200px) and (min-width: 600px) {
      .mdc-drawer--custom .mdc-drawer__toolbar-spacer {
        height: 64px; } }
@media only screen and (max-width: 1200px) {
    .mdc-drawer--custom .mdc-drawer__header {
      position: relative; }
    .mdc-drawer--custom .mdc-drawer__header::before {
      display: block;
      padding-top: 56.25%;
      content: ""; }
    .mdc-drawer--custom .mdc-drawer__header-content {
      display: flex;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      align-items: flex-end;
      box-sizing: border-box;
      padding: 16px; }
    .mdc-drawer--custom .mdc-list-item {
      font-family: Roboto, sans-serif;
      -moz-osx-font-smoothing: grayscale;
      -webkit-font-smoothing: antialiased;
      font-size: 0.875rem;
      line-height: 1.5rem;
      font-weight: 500;
      letter-spacing: 0.04em;
      text-decoration: inherit;
      text-transform: inherit;
      position: relative;
      outline: none;
      color: inherit;
      text-decoration: none; }
    .mdc-drawer--custom .mdc-list-item__graphic {
      color: rgba(0, 0, 0, 0.54); }
    .mdc-drawer--custom.mdc-drawer--permanent,
    .mdc-drawer--custom .mdc-drawer__drawer {
      background-color: #fff; }
    .mdc-drawer--custom::before {
      background-color: rgba(0, 0, 0, 0.6); }
    .mdc-drawer--custom::before {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      opacity: 0;
      opacity: var(--mdc-temporary-drawer-opacity, 0);
      content: "";
      will-change: opacity; }
    .mdc-drawer--custom .mdc-drawer__header-content {
      padding: 0; }
    .mdc-drawer--custom .mdc-drawer__drawer {
      box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
      left: 0;
      right: initial;
      will-change: transform;
      transform: translateX(-107%);
      transform: translateX(calc(-100% - 20px));
      display: flex;
      position: absolute;
      flex-direction: column;
      box-sizing: border-box;
      width: 100%;
      max-width: 240px;
      overflow: hidden;
      touch-action: none; }
      [dir="rtl"] .mdc-drawer--custom .mdc-drawer__drawer, .mdc-drawer--custom .mdc-drawer__drawer[dir="rtl"] {
        left: initial;
        right: 0; }
    .mdc-drawer--custom .mdc-drawer__content {
      flex-grow: 1;
      box-sizing: border-box;
      margin: 0;
      overflow-x: hidden;
      overflow-y: auto;
      -webkit-overflow-scrolling: touch;
      touch-action: pan-y; }
    .mdc-drawer--custom .mdc-drawer__footer {
      box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
      flex-shrink: 0; }
    .mdc-drawer--custom.mdc-drawer--animating::before {
      transition: opacity 0.3s 0ms cubic-bezier(0, 0, 0.2, 1); }
    .mdc-drawer--custom.mdc-drawer--animating.mdc-drawer--open .mdc-drawer__drawer {
      transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1); }
    .mdc-drawer--custom.mdc-drawer--animating .mdc-drawer__drawer {
      transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
    .mdc-drawer--custom.mdc-drawer--open {
      pointer-events: auto;
      width: 100%; }
      .mdc-drawer--custom.mdc-drawer--open::before {
        opacity: 1;
        opacity: var(--mdc-temporary-drawer-opacity, 1); }
      .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer {
        transform: none; }
      [dir="rtl"] .mdc-drawer--custom.mdc-drawer--open .mdc-drawer__drawer, .mdc-drawer--custom.mdc-drawer--open[dir="rtl"] .mdc-drawer__drawer {
        transform: none; }

  .mdc-drawer-scroll-lock {
    overflow: hidden; } }
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-placeholder {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%; }
  .mdc-placeholder__content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px; }
  .mdc-placeholder__widget {
    width: 70px;
    height: 70px;
    font-size: 70px; }
  .mdc-placeholder__text {
    margin-top: 10px;
    text-align: center;
    /* @alternate */
    color: rgba(0, 0, 0, 0.54);
    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }

.mdc-placeholder--icon .mdc-placeholder__widget {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54);
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }

.mdc-placeholder--error .mdc-placeholder__widget {
  color: #e57373; }

.mdc-placeholder--progress .mdc-placeholder__widget {
  color: initial; }
@keyframes blink {
  0% {
    opacity: .2; }
  20% {
    opacity: 1; }
  100% {
    opacity: .2; } }
.mdc-placeholder--progress .mdc-placeholder__text span {
  animation-name: blink;
  animation-duration: 1.4s;
  animation-iteration-count: infinite;
  animation-fill-mode: both; }
.mdc-placeholder--progress .mdc-placeholder__text span:nth-child(2) {
  animation-delay: .2s; }
.mdc-placeholder--progress .mdc-placeholder__text span:nth-child(3) {
  animation-delay: .4s; }

.mdc-loader {
  height: 100%;
  width: 100%; }

.mdc-absolute-fab, .mdc-fixed-fab {
  position: absolute; }
  .mdc-absolute-fab--right-bottom, .mdc-fixed-fab--right-bottom {
    bottom: 1rem;
    right: 1rem; }

.mdc-fixed-fab {
  position: fixed; }

.mdc-simple-tabs__body {
  margin-top: 15px; }

.mdc-get-button, .mdc-apply-button {
  display: flex;
  align-items: center;
  justify-content: center; }
  .mdc-get-button .mdc-circular-progress, .mdc-apply-button .mdc-circular-progress {
    position: absolute;
    color: inherit !important; }
  .mdc-get-button--busy, .mdc-apply-button--busy {
    pointer-events: none; }
    .mdc-get-button--busy .mdc-button__text, .mdc-apply-button--busy .mdc-button__text {
      opacity: 0; }

.dvb-niit-module-settings__mode {
  margin-top: 0 !important; }
.dvb-niit-module-settings .mdc-select {
  margin-top: 16px; }

/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* Table dump widget */
.qos-niit-tables {
  padding: 1rem;
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff); }

.qos-niit-tables__stream-panel {
  border-right: 1px solid;
  border-color: rgba(0, 0, 0, 0.12);
  width: 100%;
  height: 100%;
  max-height: 1000px;
  overflow-y: auto;
  max-width: 350px; }
  .qos-niit-tables__stream-panel .mdc-list-item {
    cursor: pointer; }

.qos-niit-tables__dump {
  width: 100%;
  padding: 10px;
  overflow: hidden; }
  .qos-niit-tables__dump .qos-niit-hexdump, .qos-niit-tables__dump .qos-niit-parsed {
    min-height: 200px; }
  .qos-niit-tables__dump__title {
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis; }
  .qos-niit-tables__dump__header {
    flex-shrink: 0;
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.75rem;
    line-height: 1.25rem;
    font-weight: 400;
    letter-spacing: 0.08em;
    text-decoration: inherit;
    text-transform: inherit;
    align-items: center;
    margin-bottom: 10px; }
    .qos-niit-tables__dump__header .mdc-button {
      margin-left: 15px;
      flex-shrink: 0; }
  .qos-niit-tables__dump > .mdc-split {
    flex-grow: 1; }
  .qos-niit-tables__dump .mdc-hexdump {
    overflow: auto;
    width: 100%; }

.qos-niit-tables__parsed {
  width: 100%;
  flex-grow: 2;
  /* flex-shrink: 0; */
  padding: 10px;
  overflow-y: auto; }

.qos-niit-tables__hexdump-options {
  flex-shrink: 0;
  padding-top: 10px;
  overflow-x: auto;
  align-items: center; }
  .qos-niit-tables__hexdump-options > * {
    margin-right: 15px; }
  .qos-niit-tables__hexdump-options > *:last-child {
    margin-right: 0; }
  .qos-niit-tables__hexdump-options .mdc-select {
    min-width: 75px; }

.qos-niit-tables__section-item {
  cursor: pointer; }

/* Table overview widget, Services overview widget */
.qos-niit-table-overview__back, .qos-niit-services-overview__back {
  cursor: pointer; }
  .qos-niit-table-overview__back .mdc-icon, .qos-niit-services-overview__back .mdc-icon {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)); }
  .qos-niit-table-overview__back .mdc-typography, .qos-niit-services-overview__back .mdc-typography {
    padding-left: 4px; }
.qos-niit-table-overview .mdc-data-table, .qos-niit-services-overview .mdc-data-table {
  /* max-height: 1000px; */
  /* overflow-y: auto; */ }
.qos-niit-table-overview .mdc-card__actions, .qos-niit-services-overview .mdc-card__actions {
  justify-content: space-between; }
.qos-niit-table-overview .mdc-form-field, .qos-niit-services-overview .mdc-form-field {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.75rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.08em;
  text-decoration: inherit;
  text-transform: inherit; }
.qos-niit-table-overview .mdc-data-table tbody .mdc-data-table__row, .qos-niit-services-overview .mdc-data-table tbody .mdc-data-table__row {
  cursor: pointer; }

/* Services overview widget */
.qos-niit-services-overview .mdc-list {
  flex-grow: 1;
  border-right: 1px solid;
  border-color: rgba(0, 0, 0, 0.12);
  max-width: 350px; }
  .qos-niit-services-overview .mdc-list .mdc-list-item {
    cursor: pointer; }
.qos-niit-services-overview__info {
  flex-grow: 1;
  padding: 1rem;
  display: flex;
  flex-flow: column nowrap;
  justify-content: flex-start;
  align-items: flex-start; }
.qos-niit-services-overview__info-row {
  width: 100%;
  align-items: stretch; }
.qos-niit-services-overview__info-cell {
  align-items: center;
  display: flex;
  flex-flow: row nowrap;
  flex-grow: 1;
  flex-basis: 0;
  padding: 0.5em;
  word-break: break-word; }
  .qos-niit-services-overview__info-cell:first-child {
    justify-content: flex-end;
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.5rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit; }
  .qos-niit-services-overview__info-cell:last-child {
    justify-content: flex-start; }

/* Pid overview widget */
.qos-niit-pid-overview .mdc-card__actions {
  justify-content: flex-end; }
.qos-niit-pid-overview .mdc-form-field {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.75rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.08em;
  text-decoration: inherit;
  text-transform: inherit; }

/* Streams items */
.qos-niit-stream-grid {
  align-items: flex-start;
  align-content: flex-start;
  height: 100%;
  width: 100%; }
  .qos-niit-stream-grid .mdc-layout-grid__cell {
    display: flex; }

.qos-niit-stream-grid-item {
  cursor: pointer;
  flex-grow: 1; }
  .qos-niit-stream-grid-item .mdc-card__media {
    display: flex;
    flex-direction: column;
    padding: 1rem; }
  .qos-niit-stream-grid-item--lost {
    background-color: #ffcdd2;
    /* @alternate */
    color: rgba(0, 0, 0, 0.87);
    color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)); }

:root {
  --mdc-box-margin: 0px; }

html {
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

body {
  margin: 0;
  background-color: #e0e0e0; }

.material-icons {
  user-select: none; }

#main-drawer {
  z-index: 21; }

#main-toolbar {
  z-index: 20; }
  #main-toolbar .mdc-tab-bar__indicator,
  #main-toolbar .mdc-tab__indicator {
    /* @alternate */
    background-color: white;
    background-color: var(--mdc-theme-text-primary-on-primary, white); }
  #main-toolbar .mdc-tab {
    /* @alternate */
    color: white;
    color: var(--mdc-theme-text-primary-on-primary, white); }
    #main-toolbar .mdc-tab .mdc-tab__icon {
      /* @alternate */
      color: white;
      color: var(--mdc-theme-text-primary-on-primary, white); }
  #main-toolbar .mdc-tab-bar-scroller__indicator {
    /* @alternate */
    color: white;
    color: var(--mdc-theme-text-primary-on-primary, white); }
  #main-toolbar .mdc-toolbar__title {
    font-weight: 300;
    font-size: 24px; }

#main-content {
  margin-top: 64px;
  position: absolute;
  width: 100%;
  /* display: flex; */
  min-height: calc(100% - 64px); }
  #main-content.main-content--dynamic {
    margin-top: 128px;
    min-height: calc(100% - 128px); }
    @media (max-width: 599px) {
      #main-content.main-content--dynamic {
        margin-top: 112px;
        min-height: calc(100% - 112px); } }

#main-toolbar, #main-content {
  left: 0px;
  transition: width 0.225s, left 0.225s; }

@media (min-width: 1200px) {
  body.hide-sidedrawer #main-toolbar, body.hide-sidedrawer #main-content {
    left: 240px;
    width: calc(100% - 240px); } }
#arbitrary-content {
  flex-grow: 2; }
  @media (min-width: 840px) {
    #arbitrary-content {
      box-sizing: border-box;
      margin: 0 auto;
      padding: 24px;
      padding: var(--mdc-layout-grid-margin-desktop, 24px); } }
  @media (min-width: 480px) and (max-width: 839px) {
    #arbitrary-content {
      box-sizing: border-box;
      margin: 0 auto;
      padding: 16px;
      padding: var(--mdc-layout-grid-margin-tablet, 16px); } }
  @media (max-width: 479px) {
    #arbitrary-content {
      box-sizing: border-box;
      margin: 0 auto;
      padding: 16px;
      padding: var(--mdc-layout-grid-margin-phone, 16px); } }
  #arbitrary-content .mdc-layout-grid {
    --mdc-layout-grid-margin-desktop: 0px;
    --mdc-layout-grid-margin-tablet: 0px;
    --mdc-layout-grid-margin-phone: 0px; }

/*# sourceMappingURL=main.css.map */
